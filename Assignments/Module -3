Module â€“ 3 : Node - Node with Mongodb
Q1. What is MongoDB
--> MongoDB is a NoSQL database system that stores data in flexible, JSON-like documents. 
It's known for its scalability, high performance, and ease of use. MongoDB is commonly used 
in modern web development for handling unstructured or semi-structured data.

Q2. What is difference between mongo DB and SQL
--> MongoDB: Flexible, document-based, JSON-like data model, dynamic schemas, horizontal scalability, limited transaction support, vibrant ecosystem.

SQL: Tabular, schema-based data model, standardized SQL query language, rigid schemas, vertical scalability, strong transaction support, mature ecosystem.

Q3. Create database for online shopping app. 
--> productSchema.js
const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String, required: true },
  price: { type: Number, required: true },
  quantity_available: { type: Number, required: true },
  category: { type: String, required: true }
});

module.exports = mongoose.model('Product', productSchema);


userSchema.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true },
  email: { type: String, required: true },
  password: { type: String, required: true },
  first_name: String,
  last_name: String,
  address: String,
  phone: String
});

module.exports = mongoose.model('User', userSchema);

const mongoose = require('mongoose');

orderItemSchema.js
const orderItemSchema = new mongoose.Schema({
  product_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
  quantity: Number,
  price_per_item: Number
});

const orderSchema = new mongoose.Schema({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  order_date: { type: Date, default: Date.now },
  status: { type: String, default: 'pending' },
  items: [orderItemSchema]
});

module.exports = mongoose.model('Order', orderSchema);

Q4. Create Require collections for online shopping app and documents.
i. User
ii. Product category
iii. Product
iv. Order
v. Review
-->// app.js
const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/shoppingApp', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('Connected to MongoDB');
}).catch((error) => {
  console.error('Error connecting to MongoDB:', error);
});

// userModel.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true },
  email: { type: String, required: true },
  password: { type: String, required: true },
});

module.exports = mongoose.model('User', userSchema);

// productCategoryModel.js
const mongoose = require('mongoose');

const productCategorySchema = new mongoose.Schema({
  name: { type: String, required: true },
});

module.exports = mongoose.model('ProductCategory', productCategorySchema);

// productModel.js
const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String, required: true },
  price: { type: Number, required: true },
  quantity_available: { type: Number, required: true },
  category_id: { type: mongoose.Schema.Types.ObjectId, ref: 'ProductCategory', required: true },
});

module.exports = mongoose.model('Product', productSchema);

// orderModel.js
const mongoose = require('mongoose');

const orderItemSchema = new mongoose.Schema({
  product_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
  quantity: { type: Number, required: true },
  price_per_item: { type: Number, required: true },
});

const orderSchema = new mongoose.Schema({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  order_date: { type: Date, default: Date.now },
  status: { type: String, default: 'pending' },
  items: [orderItemSchema],
});

module.exports = mongoose.model('Order', orderSchema);

// reviewModel.js
const mongoose = require('mongoose');

const reviewSchema = new mongoose.Schema({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  product_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
  rating: { type: Number, required: true },
  comment: String,
});

module.exports = mongoose.model('Review', reviewSchema);

Q5. Write command to show all data from product collections and sort in ascending order.
-->db.products.find().sort({ field_to_sort: 1 })

Q6. Update product price for particular product. 
-->db.products.updateOne(
   { _id: ObjectId("product_id_to_update") }, // Filter criteria to identify the product
   { $set: { price: new_price } } // New price value to set
)
example 
db.products.updateOne(
   { _id: ObjectId("123456789012") },
   { $set: { price: 50 } }
)

Q7. Write command to delete particular document and collection. 
-->delete a collection -> db.products.drop()
delete a document -> db.products.deleteOne({ _id: ObjectId("60a8e56cc5d6723d440e433a") })



Module – 2: Node - Web Development with Node

1. . What is Express.js?
--> Express.js is a lightweight web application framework for Node.js. It simplifies building web servers by providing an easy-to-use API for handling HTTP requests and responses. It's flexible, fast, and widely used for building web applications and APIs.

2. Create localhost server using express.
--> 
const express = require('express');


const app = express();


app.get('/', (req, res) => {
  res.send('Hello, World!');
});


app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});

3.  . Create basic “Hello world” app using node and express.
-->const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello, World!');
});


app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

4. Create weather app.
i. Use Hbs.
ii. Get country, state, city using api
iii. Get weather data by city
--> Express.js
const express = require('express');
const app = express();
const axios = require('axios');
const port = 3000;

app.set('view engine', 'hbs');

app.get('/', (req, res) => {
  res.render('index');
});
app.get('/weather', async (req, res) => {
  try {
    const city = req.query.city;
    const apiKey = 'YOUR_API_KEY'; // Replace with your API key
    const apiUrl = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`;
    const response = await axios.get(apiUrl);
    const weatherData = response.data;
    res.render('index', { weather: weatherData });
  } catch (error) {
    console.error('Error fetching weather:', error);
    res.render('index', { error: 'Error fetching weather. Please try again.' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

index.hbs
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Weather App</title>
</head>
<body>
  <h1>Weather App</h1>
  <form action="/weather" method="GET">
    <label for="city">Enter City:</label>
    <input type="text" id="city" name="city">
    <button type="submit">Get Weather</button>
  </form>
  {{#if weather}}
    <h2>Weather in {{weather.name}}, {{weather.sys.country}}</h2>
    <p>Temperature: {{weather.main.temp}}°C</p>
    <p>Description: {{weather.weather.[0].description}}</p>
  {{/if}}
</body>
</html>

5. Create world clock app. 
-->npm install express hbs moment-timezone

app.js

const express = require('express');
const app = express();
const moment = require('moment-timezone');
const port = 3000;

app.set('view engine', 'hbs');

app.get('/', (req, res) => {
  // Get available timezones
  const timezones = moment.tz.names();
  res.render('index', { timezones });
});

app.get('/', (req, res) => {
  const timezone = req.query.timezone;
  let currentTime;
  if (timezone) {
    currentTime = moment().tz(timezone).format('YYYY-MM-DD HH:mm:ss');
  }
  const timezones = moment.tz.names();
  res.render('index', { timezones, currentTime, timezone });
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});


index.hbs

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>World Clock App</title>
</head>
<body>
  <h1>World Clock App</h1>
  <!-- Dropdown to select timezone -->
  <form action="/" method="GET">
    <label for="timezone">Select a Timezone:</label>
    <select id="timezone" name="timezone">
      {{#each timezones}}
        <option value="{{this}}">{{this}}</option>
      {{/each}}
    </select>
    <button type="submit">Show Time</button>
  </form>
  <!-- Display current time -->
  {{#if currentTime}}
    <h2>Current Time in {{timezone}}:</h2>
    <p>{{currentTime}}</p>
  {{/if}}
</body>
</html>



